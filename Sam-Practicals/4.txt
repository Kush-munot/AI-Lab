from queue import PriorityQueue

#initial and goal states
initial_state = [[1, 2, 3], [4, 0, 5], [6, 7, 8]]
goal_state = [[0, 1, 2], [3, 4, 5], [6, 7, 8]]

#heuristic function (using manhattan distance)
def heuristic(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] != 0:
                distance += abs(i - (state[i][j]-1)//3) + abs(j - (state[i][j]-1)%3)
    return distance

# A* search algorithm
def astar(initial_state, goal_state):
    visited = set()
    pq = PriorityQueue()
    pq.put((heuristic(initial_state), initial_state, 0, []))#0 is cost , list is for path

    while not pq.empty():
        _, state, cost, path = pq.get()
        if state == goal_state:
            return path + [state]
        visited.add(tuple(map(tuple, state)))

       
        row, col = 0, 0
        for i in range(3):
            for j in range(3):
                if state[i][j] == 0:
                    row, col = i, j

        for i, j in [(row-1, col), (row, col-1), (row, col+1), (row+1, col)]:
            if 0 <= i < 3 and 0 <= j < 3:
                new_state = [row[:] for row in state]
                new_state[row][col], new_state[i][j] = new_state[i][j], new_state[row][col]
                if tuple(map(tuple, new_state)) not in visited:
                    new_path = path + [state]
                    pq.put((cost + 1 + heuristic(new_state), new_state, cost + 1, new_path))

    return None 

path = astar(initial_state, goal_state)
if path is None:
    print("Goal state is not reachable from initial state.")
else:
    print("\nStates:")
    for state in path:
        print(state)
